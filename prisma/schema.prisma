<<<<<<< HEAD
=======
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

>>>>>>> f25775c (Initial commit for issue-tracker)
generator client {
  provider = "prisma-client-js"
}

datasource db {
<<<<<<< HEAD
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Issue Model
model Issue {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String   @db.String
  description      String   @db.String
  status           Status
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  assignedTo       User?    @relation("UserIssues", fields: [assignedToUserId], references: [id])
  assignedToUserId String?  @db.ObjectId
}

// Enum for Status
=======
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Issue {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255) // varchar(191) is default
  description      String   @db.Text
  status           Status   @default(OPEN)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  assignedToUserId String?  @db.VarChar(255)
  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
}

>>>>>>> f25775c (Initial commit for issue-tracker)
enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

<<<<<<< HEAD
// Account Model
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String  @db.String
  provider          String  @db.String
  providerAccountId String  @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@index([provider, providerAccountId], map: "provider_account_unique")
  @@map("accounts")
}

// Session Model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @db.String
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
=======
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> f25775c (Initial commit for issue-tracker)

  @@map("sessions")
}

<<<<<<< HEAD
// User Model
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?   @db.String
  email          String?   @unique @db.String
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]   @relation("UserIssues") // Relation defined here
=======
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]
>>>>>>> f25775c (Initial commit for issue-tracker)

  @@map("users")
}

<<<<<<< HEAD
// Verification Token Model
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @db.String
  token      String   @db.String
  expires    DateTime

  @@index([identifier, token], map: "identifier_token_unique")
=======
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
>>>>>>> f25775c (Initial commit for issue-tracker)
  @@map("verificationtokens")
}
